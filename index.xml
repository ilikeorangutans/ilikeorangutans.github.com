<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jakob Külzer</title><link>https://ilikeorangutans.github.io/</link><description>Recent content on Jakob Külzer</description><generator>Hugo</generator><language>en-ca</language><managingEditor>jakob.kuelzer@gmail.com (Jakob Külzer)</managingEditor><webMaster>jakob.kuelzer@gmail.com (Jakob Külzer)</webMaster><copyright>Jakob Külzer</copyright><atom:link href="https://ilikeorangutans.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Zig Fetch</title><link>https://ilikeorangutans.github.io/2024/07/17/zig-fetch/</link><pubDate>Wed, 17 Jul 2024 12:18:03 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2024/07/17/zig-fetch/</guid><description>&lt;p>Zig&amp;rsquo;s package manager is still a bit rough. It only supports fetching tarballs, but many github projects don&amp;rsquo;t have them unless they have a release. There&amp;rsquo;s a &lt;a href="https://www.baeldung.com/linux/github-download-tarball">trick to fetch any commit as a tarball though&lt;/a>:&lt;/p>
&lt;pre tabindex="0">&lt;code>https://api.github.com/repos/&amp;lt;repo-owner&amp;gt;/&amp;lt;repo&amp;gt;/tarball/&amp;lt;ref&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;code>zig fetch&lt;/code> can than download the code:&lt;/p>
&lt;pre tabindex="0">&lt;code>zig fetch --save https://api.github.com/repos/&amp;lt;repo-owner&amp;gt;/&amp;lt;repo&amp;gt;/tarball/&amp;lt;ref&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Once the code is downloaded, it still has to be added to your exe or libray in &lt;code>build.zig&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-zig" data-lang="zig">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd;font-weight:bold">const&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>exe&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd">=&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>b.&lt;span style="color:#ff8000;font-weight:bold">addExecutable&lt;/span>(.{&lt;span style="color:#cbcbcb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cbcbcb"> &lt;/span>.name&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd">=&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#0c6">&amp;#34;zlox&amp;#34;&lt;/span>,&lt;span style="color:#cbcbcb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cbcbcb"> &lt;/span>.root_source_file&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd">=&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>b.&lt;span style="color:#ff8000;font-weight:bold">path&lt;/span>(&lt;span style="color:#0c6">&amp;#34;src/main.zig&amp;#34;&lt;/span>),&lt;span style="color:#cbcbcb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cbcbcb"> &lt;/span>.target&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd">=&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>target,&lt;span style="color:#cbcbcb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cbcbcb"> &lt;/span>.optimize&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd">=&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>optimize,&lt;span style="color:#cbcbcb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cbcbcb"> &lt;/span>});&lt;span style="color:#cbcbcb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cbcbcb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd;font-weight:bold">const&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>my_dep&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd">=&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>b.&lt;span style="color:#ff8000;font-weight:bold">dependency&lt;/span>(&lt;span style="color:#cbcbcb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#0c6">&amp;#34;&amp;lt;name of dependency&amp;gt;&amp;#34;&lt;/span>,&lt;span style="color:#cbcbcb"> 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cbcbcb"> &lt;/span>.{&lt;span style="color:#cbcbcb"> &lt;/span>.target&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd">=&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>target,&lt;span style="color:#cbcbcb"> &lt;/span>.optimize&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd">=&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>optimize&lt;span style="color:#cbcbcb"> &lt;/span>},&lt;span style="color:#cbcbcb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cbcbcb"> &lt;/span>);&lt;span style="color:#cbcbcb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cbcbcb"> &lt;/span>exe.root_module.&lt;span style="color:#ff8000;font-weight:bold">addImport&lt;/span>(&lt;span style="color:#0c6">&amp;#34;regex&amp;#34;&lt;/span>,&lt;span style="color:#cbcbcb"> &lt;/span>regex_dep.&lt;span style="color:#ff8000;font-weight:bold">module&lt;/span>(&lt;span style="color:#0c6">&amp;#34;regex&amp;#34;&lt;/span>));&lt;span style="color:#cbcbcb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>One Billion Row Challenge in Zig</title><link>https://ilikeorangutans.github.io/2024/05/05/one-billion-row-challenge-in-zig/</link><pubDate>Sun, 05 May 2024 13:54:44 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2024/05/05/one-billion-row-challenge-in-zig/</guid><description>&lt;p>I finally got around to looking into &lt;a href="https://github.com/gunnarmorling/1brc?tab=readme-ov-file">The One Billion Row Challenge&lt;/a>. If you&amp;rsquo;re unfamiliar, it&amp;rsquo;s a challenge to how fast a program can read and process one billion rows. It&amp;rsquo;s fascinating because it&amp;rsquo;s all about raw performance including algorithms, CPU instructions, and profiling and benchmarking. All things I enjoy dabbling with.&lt;/p>
&lt;p>So one Saturday evening I started reading up on the challenge. The first thing that struck me was the &lt;a href="https://www.morling.dev/blog/1brc-results-are-in/">top entries&amp;rsquo;&lt;/a> time: 1.535 seconds! For reference, the input is 13 GB. I can&amp;rsquo;t even dump the whole file to &lt;code>/dev/null&lt;/code> in that short of a time. So clearly, lots to learn.&lt;/p></description></item><item><title>mkdocs</title><link>https://ilikeorangutans.github.io/2024/02/16/mkdocs/</link><pubDate>Fri, 16 Feb 2024 23:05:21 -0500</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2024/02/16/mkdocs/</guid><description>&lt;p>I recently realized the docker container for my toy project &lt;a href="https://sr.ht/~ilikeorangutans/books/">&lt;code>books&lt;/code>&lt;/a> has over 2k downloads so I finally decided to write
some proper docs for it. There&amp;rsquo;s not much to document, but it deserves a nice webpage. Picked up
&lt;a href="https://www.mkdocs.org/">&lt;code>mkdocs&lt;/code>&lt;/a> because I saw it used by some other projects and I&amp;rsquo;m positively surprised. You
initialize a project and throw some markdown files at it. Then you run &lt;code>build&lt;/code> and it gives you a nice webpage for your
docs, nothing more, nothing less. Great little tool, highly recommend it.&lt;/p></description></item><item><title>Zig - First Impressions</title><link>https://ilikeorangutans.github.io/2023/10/23/zig-first-impressions/</link><pubDate>Mon, 23 Oct 2023 19:50:27 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2023/10/23/zig-first-impressions/</guid><description>&lt;p>I&amp;rsquo;ve been following the zig language for a while ever since I saw &lt;a href="https://corecursive.com/067-zig-with-andrew-kelley/">Andrew Kelly&amp;rsquo;s talk&lt;/a> on &lt;a href="https://corecursive.com/">Corecursive&lt;/a>.
The way Andrew describes the design of zig was very engrossing and who doesn&amp;rsquo;t like a language build
for speed. But I have struggled with picking it up; time is in short supply and so were docs for zig
when I first looked at it.&lt;/p>
&lt;p>But that has changed; I finally found some motivation and &lt;a href="https://ziglearn.org/">ziglearn.org&lt;/a> which
is a good introduction to zig. I have only managed to read the first two chapters, much less understand
them but it&amp;rsquo;s enough to be dangerous (to myself?).&lt;/p></description></item><item><title>Migrating Raspberry Pi From Sd Card to Usb</title><link>https://ilikeorangutans.github.io/2020/12/07/migrating-raspberry-pi-from-sd-card-to-usb/</link><pubDate>Mon, 07 Dec 2020 12:52:07 -0500</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2020/12/07/migrating-raspberry-pi-from-sd-card-to-usb/</guid><description>&lt;p>I&amp;rsquo;ve been running my Kubernetes cluster on Raspberry Pis for about a year now. Overall the cluster is stable and needs
little attention and by now many useful and important services are now running on it. With more reliance on these
services I need to ensure that the cluster doesn&amp;rsquo;t fail from preventable errors. One of the common failure modes for
Raspberry Pis are sdcards. They are not very fast, they are of limited size, and worst, they tend to fail.&lt;/p></description></item><item><title>Vim Digraph</title><link>https://ilikeorangutans.github.io/2020/11/05/vim-digraph/</link><pubDate>Thu, 05 Nov 2020 13:54:51 -0500</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2020/11/05/vim-digraph/</guid><description>&lt;p>Was writing a few posts for my &lt;a href="http://food.hannah-and-jakob.ca">food blog&lt;/a> and needed to type some some &amp;ldquo;special&amp;rdquo; characters like &lt;em>é&lt;/em>. When on a Mac that&amp;rsquo;s really simple because the keymap supports typing compound keys. But I&amp;rsquo;m on Linux and switching between keyboard layouts is annoying. So I figured vim must have a way for typing these characters, and behold, I learned about Vim&amp;rsquo;s digraph support. The &lt;a href="https://vimhelp.org/digraph.txt.html#digraph.txt">documentation&lt;/a> is quite good but I&amp;rsquo;ll cherry pick some combos because otherwise I&amp;rsquo;ll forget.&lt;/p></description></item><item><title>Building Docker Containers for ARM with buildx</title><link>https://ilikeorangutans.github.io/2020/01/03/building-docker-containers-for-arm-with-buildx/</link><pubDate>Fri, 03 Jan 2020 22:58:33 -0500</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2020/01/03/building-docker-containers-for-arm-with-buildx/</guid><description>&lt;p>I&amp;rsquo;ve spent some time over the holidays building a Kubernetes cluster running on raspberry pis. One issue I ran into was that not all docker images I wanted to run were available for arm/linux. Luckily there&amp;rsquo;s a useful tool called buildx that extends Docker to build containers for different platforms and architectures using quemu and binfmt. ARM has a &lt;a href="https://community.arm.com/developer/tools-software/tools/b/tools-software-ides-blog/posts/getting-started-with-docker-for-arm-on-linux">blog post that details the steps&lt;/a> needed to build images.&lt;/p>
&lt;p>The steps are:&lt;/p></description></item><item><title>zsh Autocompletion Caveat</title><link>https://ilikeorangutans.github.io/2019/08/23/zsh-autocompletion-caveat/</link><pubDate>Fri, 23 Aug 2019 14:21:43 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2019/08/23/zsh-autocompletion-caveat/</guid><description>&lt;p>I spent a good hour trying to get a custom completion script working while porting my app &lt;a href="https://github.com/ilikeorangutans/harbormaster">Harbormaster&lt;/a> to &lt;a href="https://github.com/spf13/cobra">Cobra&lt;/a>. It would and would not work. I retried writing the file, restarting the shell and it would just not offer any completions.
Eventually I stumbled upon a innocent looking &lt;a href="https://github.com/zsh-users/zsh-completions/issues/277#issuecomment-72867242">post&lt;/a> on Github that held the solution: remove the .zcompdump file which holds the cached completions. So I ran &lt;code>rm ~/.zcompdump &amp;amp;&amp;amp; compinit&lt;/code> and everything works as expected.&lt;/p></description></item><item><title>awk Cheat Sheet</title><link>https://ilikeorangutans.github.io/2019/03/26/awk-cheat-sheet/</link><pubDate>Tue, 26 Mar 2019 11:36:48 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2019/03/26/awk-cheat-sheet/</guid><description>&lt;p>I needed to crunch some data quickly and decided awk was the right tool to do so. But every time I use awk, I have to go read the manual, so I decided it&amp;rsquo;s time for a cheat sheet.&lt;/p>
&lt;h3 id="structure-of-an-awk-script">Structure of an awk script&lt;/h3>
&lt;pre tabindex="0">&lt;code># Comments begin with a pound sign
BEGIN {
 # Instructions run before the main loop
 FS = &amp;#34;;&amp;#34; # Set a Field Separator
}

# Each line of input is applied against all the following
# regular expressions and runs the instructions in the
# block:

/^$/ { print &amp;#34;An empty line&amp;#34; }

END {
 # Instructions run after the main loop
}
&lt;/code>&lt;/pre>&lt;p>Invoke awk with a script like so:&lt;/p></description></item><item><title>Book Arrival: The Ray Tracer Challenge</title><link>https://ilikeorangutans.github.io/2019/03/24/book-arrival-the-ray-tracer-challenge/</link><pubDate>Sun, 24 Mar 2019 09:58:18 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2019/03/24/book-arrival-the-ray-tracer-challenge/</guid><description>&lt;p>I was browsing the Pragmatic Bookshelf and this book caught my eye: &lt;a href="https://pragprog.com/book/jbtracer/the-ray-tracer-challenge">writing a ray tracer from ground up with a test
driven approach&lt;/a>? This sounds like a fantastic challenge
to me. I always was interested in ray tracers but always
thought it too complicated a topic to do it myself. However, test driven development has helped me work on some
complex and terrible code bases, so this feels reassuring to me.&lt;/p></description></item><item><title>Slow Ruby Syntax Highlighting in Vim</title><link>https://ilikeorangutans.github.io/2019/03/21/slow-ruby-syntax-highlighting-in-vim/</link><pubDate>Thu, 21 Mar 2019 12:07:08 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2019/03/21/slow-ruby-syntax-highlighting-in-vim/</guid><description>&lt;p>I recently switched back from MacVim to terminal (&lt;a href="https://github.com/jwilm/alacritty">alacritty&lt;/a>) Vim because I&amp;rsquo;m trying
to step up my tmux game after reading the excellent &lt;a href="https://pragprog.com/book/bhtmux2/tmux-2">tmux 2&lt;/a> book from the
Pragmatic Bookshelf. But anyways, I noticed incredibly slow syntax highlighting for larger ruby files, so slow that
editing code was almost impossible. After lots of searching and debugging I found it was the regular expression engine
Vim uses by default in combination with the Ruby syntax highlighter.&lt;/p></description></item><item><title>gnuplot - My New Favorite Tool</title><link>https://ilikeorangutans.github.io/2018/07/21/gnuplot-my-new-favorite-tool/</link><pubDate>Sat, 21 Jul 2018 20:50:44 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2018/07/21/gnuplot-my-new-favorite-tool/</guid><description>&lt;p>I recently had the need to quickly visualize some data and none of the systems I usually work with had the data.
Initially I dumped the data in Google Sheets and created a chart there, but that was slow and didn&amp;rsquo;t really scale well.
The data had to be cleaned, brought into the right format, columns had to be selected and charts created. At this point
I faintly recalled reading about &lt;a href="http://www.gnuplot.info/">gnuplot&lt;/a> which, despite its name, has no affiliation with the
GNU project.&lt;/p></description></item><item><title>Notes on Working Effectively With Legacy Code</title><link>https://ilikeorangutans.github.io/2018/07/02/notes-on-working-effectively-with-legacy-code/</link><pubDate>Mon, 02 Jul 2018 12:02:03 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2018/07/02/notes-on-working-effectively-with-legacy-code/</guid><description>&lt;p>I &lt;a href="https://ilikeorangutans.github.io/2018/06/18/book-arrival-working-effectivly-with-legacy-code/">recently received&lt;/a> my copy
of &lt;a href="https://www.goodreads.com/book/show/44919.Working_Effectively_with_Legacy_Code">Working Effectivly With Legacy Code&lt;/a>
and have been busy reading it. The book, as a product of its time, has examples of not only Java, but also C++, probably
to show concepts and techniques that apply to languages that behave differently in terms of linking and building. But
regardless of its examples not really applying to what I work with, it was full of useful vocabulary and techniques to
work with not only legacy systems, but really, any kind of system.&lt;/p></description></item><item><title>First Impressions of Flutter</title><link>https://ilikeorangutans.github.io/2018/06/24/first-impressions-of-flutter/</link><pubDate>Sun, 24 Jun 2018 16:23:34 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2018/06/24/first-impressions-of-flutter/</guid><description>&lt;p>Google recently announced &lt;a href="https://medium.com/flutter-io/flutter-release-preview-1-943a9b6ee65a">availability of 1.0 preview
&lt;/a> of &lt;a href="https://flutter.io/">Flutter&lt;/a>, a new
framework for building mobile apps, written from scratch with performance and beautiful UIs in mind. I&amp;rsquo;ve always been
interested in building apps for mobile devices in general and Android in particular thanks to the number of Android
devices I own, but was always discouraged by the complexity of building Android apps. I have one on the Android store
that got too unwieldy to work on and I eventually had to cease development due to time constraints. Now with flutter
closing in on its first release build I got interested, not only because it is a new beginning to building mobile apps
&amp;ndash; and we all know that developers love newly built things &amp;ndash; but also because it uses
&lt;a href="https://www.dartlang.org/">Dart&lt;/a>, Googles attempt to create a language to replace JavaScript that, sadly, went not far.&lt;/p></description></item><item><title>Book Arrival: Working Effectivly With Legacy Code</title><link>https://ilikeorangutans.github.io/2018/06/18/book-arrival-working-effectivly-with-legacy-code/</link><pubDate>Mon, 18 Jun 2018 22:58:46 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2018/06/18/book-arrival-working-effectivly-with-legacy-code/</guid><description>&lt;p>I had this book on my wishlist for quite a while, but never thought I needed it. But then it was warmly recommended to
me during a fantastic OOP Workshop with &lt;a href="https://www.sandimetz.com/">Sandi Metz&lt;/a>. If Sandi recommends it, it must be
good. Excited to dive into this one:&lt;/p>
&lt;!-- raw HTML omitted --></description></item><item><title>Give Me Smarter Objects</title><link>https://ilikeorangutans.github.io/2018/06/18/give-me-smarter-objects/</link><pubDate>Mon, 18 Jun 2018 21:20:31 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2018/06/18/give-me-smarter-objects/</guid><description>&lt;p>A coding exercise I do once in a while is writing &lt;a href="https://en.wikipedia.org/wiki/Battleship_(game)">Battleship&lt;/a>. It&amp;rsquo;s a
fun little exercise, comes with a slew of interesting decisions, and every once in a while I do this exercise with a
candidate as part of the interview process. It&amp;rsquo;s always exciting to see what other developers come up with. Today I was
doing the exercise and I contemplated on the &lt;em>primitive obsession&lt;/em> code smell that always seems to creep into my code
and saw a beautiful way to apply the &lt;em>extract class&lt;/em> refactoring that very succinctly shows how nice object oriented
programming can be.&lt;/p></description></item><item><title>OMF</title><link>https://ilikeorangutans.github.io/projects/omf/</link><pubDate>Tue, 29 May 2018 21:39:00 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/projects/omf/</guid><description>&lt;p>&lt;a href="https://github.com/ilikeorangutans/omf">OMF&lt;/a>, short for Object Manager Framework, is a Java project that enables annotation driven mapping of POJOs to Java Content Repository structures. Mapped POJOs allow transparent access to the underlying graph storage with support for primitive types, Lists, and Maps. I built OMF while working on Adobe CQ systems; data access was always too cumbersome and led to very brittle, hard to compose code, so a framework that generates bytecode on the fly to abstract away the repetitive data access tasks seemed the obvious choice.&lt;/p></description></item><item><title>Harbormaster</title><link>https://ilikeorangutans.github.io/projects/harbormaster/</link><pubDate>Tue, 29 May 2018 15:50:06 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/projects/harbormaster/</guid><description>&lt;p>Harbormaster is a tool I wrote because I found the &lt;a href="https://azkaban.github.io/">Azkaban&lt;/a> web UI too cumbersome and slow for day to day operations. In particular I found checking status of recurring jobs slow, and getting logs was annoying because they&amp;rsquo;re loaded via AJAX, so &lt;code>curl&lt;/code>ing and piping to other tools was not possible either.&lt;/p></description></item><item><title>null, Software Design, and Scala's Option</title><link>https://ilikeorangutans.github.io/2018/05/26/null-software-design-and-scalas-option/</link><pubDate>Sat, 26 May 2018 12:13:10 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2018/05/26/null-software-design-and-scalas-option/</guid><description>&lt;p>For the past year or so I&amp;rsquo;ve been writing a lot of Scala and fallen in love with its &lt;code>Option&lt;/code> type and how it allows me to avoid &lt;code>null&lt;/code>s. I reflected on &lt;code>null&lt;/code>, why they are bad, and how optional types allow you to write more expressive code.&lt;/p>
&lt;h2 id="what-is-null">What is null?&lt;/h2>
&lt;p>Most programming languages have the concept of &lt;code>null&lt;/code> (or &lt;code>nil&lt;/code>) that represents the absence of a given value or object. At it&amp;rsquo;s surface the absence of a value probably just translates into a pointer of value &lt;code>0x0&lt;/code> or in languages that do not zero variables, a pointer anywhere into the memory. But aside from the implementation details the more interesting question is how &lt;code>null&lt;/code> fits into a language&amp;rsquo;s type system.&lt;/p></description></item><item><title>A New Theme</title><link>https://ilikeorangutans.github.io/2018/05/21/a-new-theme/</link><pubDate>Mon, 21 May 2018 22:58:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2018/05/21/a-new-theme/</guid><description>&lt;p>After toying around with the really nice &lt;a href="https://github.com/aos/temple">Temple theme&lt;/a> I decided there was no better way to spend my afternoon than building my own, new theme for my blog.&lt;/p>
&lt;p>If you haven&amp;rsquo;t notice, I recently switched my blog from &lt;a href="https://jekyllrb.com/">Jekyll&lt;/a> to &lt;a href="https://gohugo.io/">Hugo&lt;/a>. The upgrade path from the really old version of Jekyll to the latest version wasn&amp;rsquo;t quite working as expected, and having to mess around with Gemfiles isn&amp;rsquo;t really something I enjoy. Hugo on the other hand is written in Go and comes as a single, standalone binary. That seemed really appealing and I&amp;rsquo;ve had good experiences when trying to build a little &lt;a href="https://github.com/ilikeorangutans/hugo-photo-scanner">photo gallery builder&lt;/a> with it a while ago before Hugo had actual photo support. Moving the content over from the Jekyll frontmatter to the Hugo frontmatter was done easy enough, I even moved some of the good posts from my really old blog on here. I was almost perfectly happy, exception for the theme. The Temple theme is nice, but it wasn&amp;rsquo;t quite what I wanted. So this weekend I built my own (yeah, you&amp;rsquo;re looking at it).&lt;/p></description></item><item><title>Inspiration and Action</title><link>https://ilikeorangutans.github.io/2018/03/30/inspiration-and-action/</link><pubDate>Fri, 30 Mar 2018 11:27:01 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2018/03/30/inspiration-and-action/</guid><description>&lt;p>I&amp;rsquo;m currently re-reading &lt;a href="https://www.amazon.com/gp/product/0321503627/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;amp;tag=jakkuesblo-20&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0321503627&amp;amp;linkId=a9bf101a0a7973e0d0d78406aa41dc23">Growing Object-Oriented Software, Guided by Tests&lt;/a>, and this quote really spoke to me:&lt;/p>
&lt;blockquote>
&lt;p>We should be taught not to wait for inspiration to start a thing. Action always generates inspiration. Inspiration seldom generates action.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ndash; Frank Tibolt&lt;/p>&lt;/blockquote>
&lt;p>I think of myself as a perfectionist, the kind of person that hates to produce anything short of flawless. And while this is great quality to have because it drives me to improve and progress, it&amp;rsquo;s also incredibly crippling and frustrating. I&amp;rsquo;ve often noticed that while I had great ideas, I would often fail to implement them because I would try to over engineer my approach so it would solve everything perfectly. Obviously, many of these ideas and projects never went anywhere. But then on the contrary, ideas where I just started hacking something together often went much further and produced something usable and new.&lt;/p></description></item><item><title>About</title><link>https://ilikeorangutans.github.io/about/</link><pubDate>Wed, 28 Mar 2018 13:56:38 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/about/</guid><description>&lt;p>Hi, my name is Jakob and this is my website and blog. I write about things that I find interesting and about things that I think about. And sometimes just things that took me a long while to figure out.&lt;/p>
&lt;p>If you want to reach out to me find my email address at the bottom of the page. A lot of the stuff I experiment with ends up on Sourcehut or Github, link also at the bottom.&lt;/p></description></item><item><title>Data Engineer, Data Platform</title><link>https://ilikeorangutans.github.io/cv/shopify/data_engineer/</link><pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/cv/shopify/data_engineer/</guid><description/></item><item><title>Freelance Consultant, Security</title><link>https://ilikeorangutans.github.io/cv/optimabit/_consultant/</link><pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/cv/optimabit/_consultant/</guid><description/></item><item><title>Senior Software Engineer, Database Platform</title><link>https://ilikeorangutans.github.io/cv/shopify/senior_software_engineer/</link><pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/cv/shopify/senior_software_engineer/</guid><description>&lt;ul>
&lt;li>Foo&lt;/li>
&lt;li>Bar&lt;/li>
&lt;li>Bla&lt;/li>
&lt;/ul></description></item><item><title>Senior Software Engineer, Database Platform</title><link>https://ilikeorangutans.github.io/cv/shopify/senior_software_engineer_data/</link><pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/cv/shopify/senior_software_engineer_data/</guid><description>&lt;ul>
&lt;li>Foo&lt;/li>
&lt;li>Bar&lt;/li>
&lt;li>Bla&lt;/li>
&lt;/ul></description></item><item><title>On Wasted Time</title><link>https://ilikeorangutans.github.io/2017/08/23/on-wasted-time/</link><pubDate>Wed, 23 Aug 2017 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2017/08/23/on-wasted-time/</guid><description>&lt;p>Recently I&amp;rsquo;ve been feeling&amp;hellip; unaccomplished. Despite all my achievements, acquired skills, and successes I&amp;rsquo;ve had a thought gnawing at the back of my mind. I realized, after looking at my extensive list of side and toy projects, that none of them are making any progress. In some of them I invested lots of time, others are just ideas, barely sketches. But they all have in common that I grew tired of working on them. Either because after a day at work my brain is tired, or because other things are taking precedence. I&amp;rsquo;ve moved into a house that requires constant upkeep. Things break or wear out and before your know it you&amp;rsquo;ve spent an afternoon fixing something. And then I&amp;rsquo;ve finally picked up a regular workout routine. Generally I&amp;rsquo;m proud of that, and because these things take time, I had no time for my side projects. Or at least that&amp;rsquo;s what I thought and told myself.&lt;/p></description></item><item><title>Google Appengine, Go, and Vendoring</title><link>https://ilikeorangutans.github.io/2016/05/22/google-appengine-go-and-vendoring/</link><pubDate>Sun, 22 May 2016 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2016/05/22/google-appengine-go-and-vendoring/</guid><description>&lt;p>I&amp;rsquo;m working on a small app running on Google App engine using Go and upgraded to the latest version of the GAE SDK. The latest version uses Go 1.6 instead of 1.4 like the older version I had. Upgrading was mostly straightforward, but once I started using vendoring I got strange build errors like this:&lt;/p>
&lt;pre>&lt;code>2016/05/22 13:26:47 go-app-builder: Failed parsing input: parser: bad import &amp;quot;syscall&amp;quot; in vendor/golang.org/x/net/ipv4/dgramopt_posix.go
&lt;/code>&lt;/pre>
&lt;p>I got different variations of this, but all came down to the same problem: some code was importing packages that GAE doesn&amp;rsquo;t want you tu use. Sadly these errors don&amp;rsquo;t show up during normal &lt;code>goapp build&lt;/code> or &lt;code>goapp test&lt;/code> cycles, but only when you want to deploy or start a local devserver.&lt;/p></description></item><item><title>Writing an Operating System - Environment Setup</title><link>https://ilikeorangutans.github.io/2015/10/26/writing-an-operating-system-cross-compiler-setup/</link><pubDate>Mon, 26 Oct 2015 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2015/10/26/writing-an-operating-system-cross-compiler-setup/</guid><description>&lt;p>I&amp;rsquo;ve been reading &lt;a href="http://littleosbook.github.io/">The little book about OS development&lt;/a> and &lt;a href="http://wiki.osdev.org/">wiki.osdev.org&lt;/a> and took some notes along the line. Here&amp;rsquo;s what I wrote on environment setup.&lt;/p>
&lt;h3 id="environment-setup">Environment setup&lt;/h3>
&lt;p>You&amp;rsquo;ll need a cross compile toolchain consisting of &lt;a href="https://www.gnu.org/software/binutils/">GNU Binutils&lt;/a> and &lt;a href="https://gcc.gnu.org/">gcc&lt;/a>. The &lt;a href="http://wiki.osdev.org/GCC_Cross-Compiler">osdev wiki&lt;/a> has a great page on setting up a cross compilation toolchain.&lt;/p>
&lt;p>It took me a few times because I didn&amp;rsquo;t read the instructions properly. It is important to unpack the sources for binutils and gcc and have separate build directories, &lt;code>gcc-4.2&lt;/code> and &lt;code>gcc-build&lt;/code> for example. Then, for building gcc, make sure the newly built binutils are on your path.&lt;/p></description></item><item><title>gorename and invalid expression</title><link>https://ilikeorangutans.github.io/2015/10/23/gorename-and-invalid-expression/</link><pubDate>Fri, 23 Oct 2015 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2015/10/23/gorename-and-invalid-expression/</guid><description>&lt;p>This took me longer to figure out than I care to admit, so here&amp;rsquo;s the solution.&lt;/p>
&lt;p>The issue comes up when trying to use &lt;a href="https://godoc.org/golang.org/x/tools/cmd/gorename">gorename&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2c5dcd;font-weight:bold">$&lt;/span> gorename -from &lt;span style="color:#0c6">&amp;#34;github.com/ilikeorangutans/foo&amp;#34;&lt;/span>.MyType -to &lt;span style="color:#0c6">&amp;#39;MyBetterType&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa">gorename: -from &amp;#34;github.com/ilikeorangutans/foo.MyType&amp;#34;: invalid expression
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Even though the &lt;code>from&lt;/code> query looks normal, &lt;code>gorename&lt;/code> just refuses to work. However the issue is not so much with &lt;code>gorename&lt;/code> but rahter my shell, zsh. Turns out properly escaping your from query, fixes the issue:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2c5dcd;font-weight:bold">$&lt;/span> gorename -from &lt;span style="color:#0c6">&amp;#39;&amp;#34;github.com/ilikeorangutans/foo&amp;#34;.MyType&amp;#39;&lt;/span> -to &lt;span style="color:#0c6">&amp;#39;MyBetterType&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa">Renamed 15 occurrences in 5 files in 1 package.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice the single quotes around the entire &lt;code>from&lt;/code> parameter.&lt;/p></description></item><item><title>Software Developer</title><link>https://ilikeorangutans.github.io/cv/shopify/software_developer/</link><pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/cv/shopify/software_developer/</guid><description>&lt;ul>
&lt;li>Foo&lt;/li>
&lt;li>Bar&lt;/li>
&lt;li>Bla&lt;/li>
&lt;/ul></description></item><item><title>Using Golang and Graphviz to Visualize Complex Grails Applications</title><link>https://ilikeorangutans.github.io/2014/05/03/using-golang-and-graphviz-to-visualize-complex-grails-applications/</link><pubDate>Sat, 03 May 2014 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2014/05/03/using-golang-and-graphviz-to-visualize-complex-grails-applications/</guid><description>&lt;p>At work we are maintaining several large and complex grails applications. In order to improve stability and reliability, we&amp;rsquo;re trying to increase test coverage. But as with all projects, time and resources are limited. In order to get a better understanding of what parts of the application are more important than others, I decided to use &lt;a href="http://www.graphviz.org/">Graphviz&lt;/a> to help me get a better overview of our applications.&lt;/p>
&lt;h3 id="meet-graphviz">Meet Graphviz&lt;/h3>
&lt;p>I discovered my love for the &lt;a href="http://www.graphviz.org/content/dot-language">dot language&lt;/a> when I used it years ago to analyze template hierarchies in a proprietary CMS system I worked on. In a nutshell, it lets you specify a graph with nodes and edges plus some extra attributes for labels, shapes etc. It&amp;rsquo;s really a concise little language:&lt;/p></description></item><item><title>Maven Release Plugin and Git 1.9</title><link>https://ilikeorangutans.github.io/2014/04/29/maven-release-plugin-and-git-19/</link><pubDate>Tue, 29 Apr 2014 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2014/04/29/maven-release-plugin-and-git-19/</guid><description>&lt;p>Ran into this issue today and wasted a good hour on figuring out what happened. Seems to be an issue with Git 1.9.x.&lt;/p>
&lt;h3 id="symptoms">Symptoms&lt;/h3>
&lt;p>Maven release plugin successfully completes the &lt;code>release:prepare&lt;/code> goal, creates the tag, but fails to commit the changed &lt;code>pom.xml&lt;/code>.&lt;/p>
&lt;h3 id="solution">Solution&lt;/h3>
&lt;p>Git&amp;rsquo;s output format changed slightly in one of the recent versions and Maven&amp;rsquo;s SCM provider expects output in a certain way. Luckily you can force git to use the old output style:&lt;/p></description></item><item><title>Golang Reading and Notes for April 2014</title><link>https://ilikeorangutans.github.io/2014/04/27/golang-reading-and-notes-for-april-2014/</link><pubDate>Sun, 27 Apr 2014 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2014/04/27/golang-reading-and-notes-for-april-2014/</guid><description>&lt;p>Last week I attended the &lt;a href="http://golang.meetup.com/cities/ca/on/toronto/">Toronto Golang Usergroup Meetup&lt;/a> and it was plenty of fun. If you&amp;rsquo;re in or near Toronto and like to dabble with Go, come out. Oh, and did I mention free pizza?&lt;/p>
&lt;h3 id="notes">Notes&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Casting in Go is slightly different than in C related languages. Instead of a cast, you perform &lt;a href="http://golang.org/doc/effective_go.html#interface_conversions">a type conversion&lt;/a>:&lt;/p>
&lt;pre>&lt;code> var myVariable SomeGenericType = ...

 casted, ok := myVariable.(MoreSpecificType)
 // ok is a bool
 if ok {
 	// Type conversion successful
 } else {
 	// myVariable does not implement MoreSpecificType
 }
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>range&lt;/code> keyword when used with two return values does not return references, but rather copies. This had me struggle for a while as my code was not behaving as I thought it would. I had a slice of structs and was happily iterating over it:&lt;/p></description></item><item><title>Grails 2 Testing Guide</title><link>https://ilikeorangutans.github.io/2014/02/06/grails-2-testing-guide/</link><pubDate>Thu, 06 Feb 2014 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2014/02/06/grails-2-testing-guide/</guid><description>&lt;p>&lt;strong>Note: I&amp;rsquo;m still working on this post, but I already use it as a reference so there&amp;rsquo;ll be more content over time.&lt;/strong>&lt;/p>
&lt;p>I&amp;rsquo;ve been quite busy at work with updating a Grails 1.3 application to 2.3.4. While writing a test harness it became apparent that lots of things have changed since I&amp;rsquo;ve last worked with Grails. Many changes are for the better, especially the integration of Spock framework. However, there were some issues that took me a while to figure out. The Grails docs on &lt;a href="http://grails.org/doc/latest/guide/testing.html">testing&lt;/a> are comprehensive, but long. Here&amp;rsquo;s my cheat sheet.&lt;/p></description></item><item><title>First impressions: Go</title><link>https://ilikeorangutans.github.io/2013/11/12/first-impressions-go/</link><pubDate>Tue, 12 Nov 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2013/11/12/first-impressions-go/</guid><description>&lt;p>Ever since Google release &lt;a href="http://www.golang.org/">Go&lt;/a> I&amp;rsquo;ve been curious. Many good things were said and I always read bits and pieces here and there. Last week I decided to dive deeper and write some small things and get to know the language.&lt;/p>
&lt;p>So far I&amp;rsquo;m really impressed. This is a quick list of things I&amp;rsquo;ve noticed:&lt;/p>
&lt;h3 id="language">Language&lt;/h3>
&lt;p>The go language is full of nice surprises. I haven&amp;rsquo;t seen everything, but just a few things that really impressed me:&lt;/p></description></item><item><title>Thoughts on Authorization Schemes</title><link>https://ilikeorangutans.github.io/2013/08/15/thoughts-on-authorization-schemes/</link><pubDate>Thu, 15 Aug 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2013/08/15/thoughts-on-authorization-schemes/</guid><description>&lt;p>Today I was experimenting with some new tools (&lt;a href="http://prose.io/">Prose&lt;/a>) and was confronted with a screen that probably everybody that owns a smartphone or uses any kind of connected online service has seen before: an authorization screen where the user is expected to either approve or deny an application based on list of permissions. Here&amp;rsquo;s how Github&amp;rsquo;s screen looks like:&lt;/p>
&lt;p>&lt;img src="https://ilikeorangutans.github.io/assets/images/github-authorization.png" alt="Github Authorization Screen">&lt;/p>
&lt;p>Android has a similar screen when you install an app, IOS probably has one as well. Pretty much every connected system, be it Facebook, Github, Stackoverflow, pretty much everything that uses OAuth or similar technologies will have a screen like this. From a technology and development point of view it makes a lot of sense; at least initially. You break down privileges in a system into a few neat categories and if an application wants to use this service, it has to declare what it uses. Ideally the system would enforce that the application can only use the declared permissions and in theory that would make everything safer…&lt;/p></description></item><item><title>JSR-269 Annotation Processing</title><link>https://ilikeorangutans.github.io/2013/08/13/jsr-269-annotation-processing/</link><pubDate>Tue, 13 Aug 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2013/08/13/jsr-269-annotation-processing/</guid><description>&lt;p>I&amp;rsquo;ve been contemplating compile time bytecode manipulation for the &lt;a href="http://www.objectmapper.org/">Object Mapper Framework&lt;/a> for a while now. Compile time instrumentation of classes seems to be a better approach and does away a whole lot of class loading issues, especially in OSGI environments. In any case, I remembered &lt;a href="http://projectlombok.org/">Project Lombok&lt;/a> and reading about &lt;a href="http://jcp.org/en/jsr/detail?id=269">JSR-269&lt;/a>, which was introduced with Java 1.6. It&amp;rsquo;s an API that allows you to plug custom annotation processors into javac.&lt;/p>
&lt;p>After experimenting and reading a bit, here is my reading list:&lt;/p></description></item><item><title>Switched from Eclipse to IntelliJ</title><link>https://ilikeorangutans.github.io/2013/07/28/making-eclipses-method-stubs-better/</link><pubDate>Sun, 28 Jul 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2013/07/28/making-eclipses-method-stubs-better/</guid><description>&lt;p>Over the years I have always been fan and user of the Eclipse platform. I liked the openness, the available plugins, and many of its features, including the CTRL-1 hotkey that does everything, and a few other things. However, over time Eclipse got slower and slower, more unstable, and after a while just a pain to use, especially when using more than one screen. I decided to give IntelliJ another try, as I&amp;rsquo;ve done a few times before. And like every time I tried it, I got really frustrated. IntelliJ and Eclipse differ in certain areas, and my inability to use the old shortcuts just made me feel like an infant on stilts. However, after more encouraging tips from Reddit and other research, I installed the &lt;a href="http://plugins.jetbrains.com/plugin/?id=1003">Key Promoter Plugin&lt;/a> which shows an angry popup whenever you use the mouse to do something that has a shortcut. With that, I&amp;rsquo;m learning keyboard shortcuts quite fast&amp;hellip;&lt;/p></description></item><item><title>Making Eclipse's Method Stubs Better and other things</title><link>https://ilikeorangutans.github.io/2013/06/26/making-eclipses-method-stubs-better-and-other-things/</link><pubDate>Wed, 26 Jun 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2013/06/26/making-eclipses-method-stubs-better-and-other-things/</guid><description>&lt;p>Just downloaded &lt;a href="http://www.eclipse.org/kepler/">Eclipse Kepler&lt;/a> and I&amp;rsquo;m quite happy with it. It appears fast and stable so far, but that could be just that it&amp;rsquo;s a brand new install. Anyways, I re-added some of my usual code templates and while doing so, I discovered a few useful things. And because I keep doing this on every Eclipse installation, I decided to write this down here. On a related note, an Eclipse plugin to share your Eclipse templates would be pretty rad. But I digress.&lt;/p></description></item><item><title>The Case for Continuous Integration</title><link>https://ilikeorangutans.github.io/2013/06/01/the-case-for-continuous-integration/</link><pubDate>Sat, 01 Jun 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2013/06/01/the-case-for-continuous-integration/</guid><description>&lt;p>In my career as a software developer, I&amp;rsquo;ve come to appreciate the principles of Continuous Integration (CI). It forces you to do the hard things early and often and thus helps you reduce risk during development. It forces you to write tests, and be responsible about what you check in. All in all, good qualities and something that every development team should aspire to. Or so I thought. Reality is different, and so far almost every development team I have interacted with is deadly afraid of doing CI. So much, that there&amp;rsquo;s been near-mutinies because CI and what it means for team, causes so many problems. This is something that puzzles me, and I realize it might be because the teams in question don&amp;rsquo;t fully understand what CI is or only realize a subset of what it means. This is my attempt to demystify and explain CI.&lt;/p></description></item><item><title>The Problem with LinkedIn's Skills Endorsement</title><link>https://ilikeorangutans.github.io/2013/04/04/the-problem-with-linkedins-skills-endorsment/</link><pubDate>Thu, 04 Apr 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2013/04/04/the-problem-with-linkedins-skills-endorsment/</guid><description>&lt;p>A while ago LinkedIn introduced what looked like a really cool feature, an easy way to &amp;ldquo;endorse&amp;rdquo; skills of your contacts. It&amp;rsquo;s really easy to go in and click &amp;ldquo;Endorse&amp;rdquo; on a bunch of skills. However, one thing that kept surprising me was &lt;em>who&lt;/em> endorsed &lt;em>what&lt;/em> skills. For example, just today I had a ex-coworker from over 4 years ago endorse me for Hibernate. Which by itself is a nice gesture, only thing is, he&amp;rsquo;s an art director. I don&amp;rsquo;t want to be pretentious, but I would believe that he knows as much about Hibernate as I know about Photoshop filters or fine arts. As a matter of fact, I usually get yelled at for my choices of colour. If he would have endorsed me for &amp;ldquo;Teamwork&amp;rdquo; or &amp;ldquo;Attention to Detail&amp;rdquo; or something like that, I would agree that it is an accurate representation of my skills. But getting endorsed for my Java ORM skills by a designer doesn&amp;rsquo;t constitute valuable feedback.&lt;/p></description></item><item><title>On Developer Happiness and Productivity</title><link>https://ilikeorangutans.github.io/2013/04/03/on-developer-happiness-and-productivity/</link><pubDate>Wed, 03 Apr 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2013/04/03/on-developer-happiness-and-productivity/</guid><description>&lt;p>I&amp;rsquo;ve had the idea for this blog post in my mind for a long time. It is based on all my personal experiences and observations over the past years and is in no way scientific. It is my personal opinion, and even though this is how I perceive the world, it might not be true for other people. With that said, let&amp;rsquo;s jump to the core of things.&lt;/p>
&lt;blockquote>
&lt;p>A happy developer is a productive developer.&lt;/p></description></item><item><title>Date Arithmetics in XSLT 2</title><link>https://ilikeorangutans.github.io/2013/04/02/date-arithmetics-in-xslt-2/</link><pubDate>Tue, 02 Apr 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2013/04/02/date-arithmetics-in-xslt-2/</guid><description>&lt;p>Now here&amp;rsquo;s something I didn&amp;rsquo;t know: XSLT 2 and XPath actually support date arithmetic! Took me a while to figure it out, but here&amp;rsquo;s how it works.&lt;/p>
&lt;p>First, all your dates will have to be in &lt;a href="http://en.wikipedia.org/wiki/ISO_8601">ISO-8601&lt;/a> format. For dates only it looks like this: &lt;code>YYYY-MM-DD&lt;/code> and for dates and times, like this: &lt;code>YYYY-MM-DDTHH:mm:SS.sssZ&lt;/code>. There&amp;rsquo;s a few other formats, but these are the ones that probably cover all use cases.&lt;/p>
&lt;p>In order to make use of all the functions regarding date and time, the values will have to be converted into the appropriate types. They data types are defined in the XMLSchema namespace &lt;a href="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema&lt;/a> and are:&lt;/p></description></item><item><title>OSGI, Guice, and Peaberry: first steps</title><link>https://ilikeorangutans.github.io/2013/02/27/osgi-guice-and-peaberry-first-steps/</link><pubDate>Wed, 27 Feb 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2013/02/27/osgi-guice-and-peaberry-first-steps/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I&amp;rsquo;ve been trying to get &lt;a href="https://code.google.com/p/google-guice/">Google Guice&lt;/a> and &lt;a href="https://code.google.com/p/peaberry/">Peaberry&lt;/a> to work in my OSGI projects for a while. Google Guice is a great dependency injection framework, and Peaberry promises to bridge the gap between OSGI services and dependency injection.&lt;/p>
&lt;p>However, getting Peaberry to work was not trivial, mostly because there aren&amp;rsquo;t many docs and the quality of the docs is somewhat lacking. The best piece is still this pdf &lt;a href="https://code.google.com/p/peaberry/downloads/detail?name=peaberry%20-%20blending%20services%20and%20extensions.pdf">Peaberry - blending services and extensions&lt;/a>, but it&amp;rsquo;s a lot of information in very little space.&lt;/p></description></item><item><title>Type Incompatibility With Maven SCR Plugin</title><link>https://ilikeorangutans.github.io/2013/02/06/type-incompatibility-with-maven-scr-plugin/</link><pubDate>Wed, 06 Feb 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2013/02/06/type-incompatibility-with-maven-scr-plugin/</guid><description>&lt;p>Yesterday I ran into a most strange error when compiling one of my OSGI bundles:&lt;/p>
&lt;pre>&lt;code>[ERROR] Failed to execute goal org.apache.felix:maven-scr-plugin:1.7.4:scr (generate-scr-scrdescriptor) on project XXX: A type incompatibility occured while executing org.apache.felix:maven-scr-plugin:1.7.4:scr: com.thoughtworks.qdox.model.Annotation cannot be cast to java.util.List
&lt;/code>&lt;/pre>
&lt;p>I saw several variations of that error and was initially clueless as how to fix it. However, I eventually found the problem:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff8000;font-weight:bold">@Service&lt;/span>(value&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd">=&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>{&lt;span style="color:#cbcbcb"> &lt;/span>MyService.&lt;span style="color:#2c5dcd;font-style:italic">class&lt;/span>,&lt;span style="color:#cbcbcb"> &lt;/span>ManagedService.&lt;span style="color:#2c5dcd;font-style:italic">class&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>})&lt;span style="color:#cbcbcb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cbcbcb">&lt;/span>&lt;span style="color:#ff8000;font-weight:bold">@Component&lt;/span>(immediate&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd">=&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd;font-weight:bold">true&lt;/span>)&lt;span style="color:#cbcbcb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cbcbcb">&lt;/span>&lt;span style="color:#ff8000;font-weight:bold">@Properties&lt;/span>(&lt;span style="color:#ff8000;font-weight:bold">@Property&lt;/span>(name&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd">=&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#0c6">&amp;#34;foo&amp;#34;&lt;/span>,&lt;span style="color:#cbcbcb"> &lt;/span>value&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd">=&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#0c6">&amp;#34;bar&amp;#34;&lt;/span>))&lt;span style="color:#cbcbcb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cbcbcb">&lt;/span>&lt;span style="color:#2c5dcd;font-weight:bold">public&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd;font-weight:bold">class&lt;/span> &lt;span style="text-decoration:underline">NissanAutoDataUrlGenerator&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>&lt;span style="color:#2c5dcd;font-weight:bold">implements&lt;/span>&lt;span style="color:#cbcbcb"> &lt;/span>ManagedService&lt;span style="color:#cbcbcb"> &lt;/span>{&lt;span style="color:#cbcbcb"> &lt;/span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The mistake is that the &lt;code>@Properties&lt;/code> annotation takes an array as it&amp;rsquo;s parameter. Eclipse does not mark the above as an error, however, the Maven plugin is not happy about it. Here&amp;rsquo;s the correct code:&lt;/p></description></item><item><title>Google Guice and Scope Mixing</title><link>https://ilikeorangutans.github.io/2012/12/11/google-guice-and-scope-mixing/</link><pubDate>Tue, 11 Dec 2012 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2012/12/11/google-guice-and-scope-mixing/</guid><description>&lt;p>I&amp;rsquo;ve been working on a small Java application I wrote a few years ago for some bug fixes and in the process of making it better, I introduced &lt;a href="https://code.google.com/p/google-guice/">Google Guice&lt;/a>, my favourite dependency injection framework. On of the great features of Guice is that it supports different &lt;a href="https://code.google.com/p/google-guice/wiki/Scopes">scopes for injection&lt;/a>. Per default, Guice will return a new object for every request. But sometimes you want to objects to be created a bit less liberally, for example, you want a certain object to be created only once. Guice has a &lt;code>@Singleton&lt;/code> scope for that. Want an object to be created once for a request? Guice and &lt;a href="https://code.google.com/p/google-guice/wiki/Servlets">guice-servlet&lt;/a> offers &lt;code>@RequestScoped&lt;/code> and &lt;code>SessionScoped&lt;/code>. But there&amp;rsquo;s more, need JUnit per test scope? &lt;a href="https://code.google.com/p/guiceberry/">Guiceberry&lt;/a> has exactly that: &lt;code>@TestScoped&lt;/code> that will make sure every test gets exactly one object.&lt;/p></description></item><item><title>Reading List: JVM Internals, Rugged Software, and 12 Factor Apps</title><link>https://ilikeorangutans.github.io/2012/12/04/reading-list-jvm-internals-rugged-software-and-12-factor-apps/</link><pubDate>Tue, 04 Dec 2012 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2012/12/04/reading-list-jvm-internals-rugged-software-and-12-factor-apps/</guid><description>&lt;p>Recently I&amp;rsquo;ve been reading a lot about software development and philosophies on how to write better software. I really enjoyed the &lt;a href="https://www.ruggedsoftware.org/">Rugged Manifesto&lt;/a> as it emphasizes how software is crucial in our world and the responsibilities that come with it.
Another great guide is &lt;a href="http://www.12factor.net/">Twelve-Factor App&lt;/a>, a list of 12 principles on how to effectively implement and operate applications.
And last but not least, &lt;a href="http://www.cubrid.org/blog/dev-platform/understanding-jvm-internals">Understanding JVM Internals&lt;/a>, a really well written cross cut through the JVM, including class file format, JVM structure and stack memory layouts.&lt;/p></description></item><item><title>Apache Sling Resource Resolver Rules in a Nutshell</title><link>https://ilikeorangutans.github.io/2012/11/20/apache-sling-resource-resolver-rule-priority-explained/</link><pubDate>Tue, 20 Nov 2012 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2012/11/20/apache-sling-resource-resolver-rule-priority-explained/</guid><description>&lt;p>If you work with Apache Sling, you have probably encountered the ResourceResolver and its configuration rules.
In short, the ResourceResolver is the part of Sling that resolves incoming requests to actual or virtual
resources. For example, if a request for &lt;code>/foo/bar&lt;/code> is coming in the resolver will resolve that to a
corresponding node in the JCR. However, sometimes it is not desireable to expose the internal structure of the
repository or the required external structure cannot be represented using the JCR. In that case the resolver
can be customized by installing resolver rules. Resolver rules can be modified via the OSGI configuration
editor or the OSGI ConfigurationAdmin.&lt;/p></description></item><item><title>commons-logging in OSGI Environments</title><link>https://ilikeorangutans.github.io/2012/11/14/commons-logging-in-osgi-environments/</link><pubDate>Wed, 14 Nov 2012 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2012/11/14/commons-logging-in-osgi-environments/</guid><description>&lt;p>While working on a small toy project using Apache Felix and commons-httpclient, I kept running into the issue that there is no official OSGI bundle for Apache commons-logging out there. While most Apache commons projects either provide simple bundles or full blown OSGI implementations with Activators and Services, commons-logging is an interesting exception. If you scan the &lt;a href="http://wiki.apache.org/commons/CommonsOsgi">Commons OSGI status page&lt;/a>, you will notice that there is no OSGI version for commons-logging available, and a separate section to explain why. I haven&amp;rsquo;t dug into why and how it conflicts with the OSGI classloading scheme, but I can see that being a problem. Be it as it may, there is no official OSGI bundle for commons logging.&lt;/p></description></item><item><title>OSGI Bootstrapping</title><link>https://ilikeorangutans.github.io/2012/10/23/osgi-bootstrapping/</link><pubDate>Tue, 23 Oct 2012 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2012/10/23/osgi-bootstrapping/</guid><description>&lt;p>I&amp;rsquo;ve been working with OSGI based technology for a while now and it&amp;rsquo;s a great piece of technology. However, so far I&amp;rsquo;ve only worked with OSGI technology that runs in existing instances of the framework. A running framework is easy to deal with, but how do you get to this point? I spent some time today playing with that, and it took me a while to put it all together. So naturally, I&amp;rsquo;ll have to record my findings here.&lt;/p></description></item><item><title>OSGI Classloading Reading List</title><link>https://ilikeorangutans.github.io/2012/10/12/osgi-classloading-reading-list/</link><pubDate>Fri, 12 Oct 2012 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2012/10/12/osgi-classloading-reading-list/</guid><description>&lt;p>I&amp;rsquo;ve been doing a lot of reading on how OSGI handles class loading. I&amp;rsquo;m starting to fully understand and leverage OSGI and I&amp;rsquo;m trying to keep my framework &lt;a href="https://github.com/ilikeorangutans/omf">Object Mapper&lt;/a> as compatible with OSGI as I can.&lt;/p>
&lt;p>In OSGI classloading is very restricted, similar to what happens in enterprisy Java application servers, and completely unlike traditional Java applications where everything shares a single classloader. In OSGI each bundle has its own classloader and what is visible accross the bundle boundaries is subject to strict export rules. In order to use a class outside of a bundle you&amp;rsquo;ll have to explicitly declare its package as exported. There are many benefits to this strict architecture, clean architectures, reusable components and the ability to update bundles at runtime are probably the most important ones.&lt;/p></description></item><item><title>Senior Software Developer</title><link>https://ilikeorangutans.github.io/cv/criticalmass/senior_software_developer/</link><pubDate>Wed, 01 Aug 2012 00:00:00 +0000</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/cv/criticalmass/senior_software_developer/</guid><description/></item><item><title>Horray for Jekyll</title><link>https://ilikeorangutans.github.io/2012/06/22/horray-for-jekyll/</link><pubDate>Fri, 22 Jun 2012 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2012/06/22/horray-for-jekyll/</guid><description>&lt;p>So I finally got around to play with Jekyll, a static site generator for websites. I was initially sceptical whether a static site generator would be up for running a blog, but after playing with it for a bit, I&amp;rsquo;m in love with this concept. The ability to write my posts in vim (MacVim that is) and version them with Git makes me very happy. As much as I like Wordpress, it&amp;rsquo;s getting more and more sluggish (on my old server at least) and every time I&amp;rsquo;m logging in to it, I spend half an hour installing updates and patches. And with every upgrade I&amp;rsquo;m worried about the database &amp;ndash; even though, in Wordpress&amp;rsquo; defense, no upgrade ever broke the database. Also, I&amp;rsquo;m particularly impressed with support for syntax highlighting, which is absolutely essential for technical posts. I&amp;rsquo;m still digging through the documentation and learning how to use Jekyll, but I&amp;rsquo;m getting there.&lt;/p></description></item><item><title>Panoramas from Delhi, India</title><link>https://ilikeorangutans.github.io/2012/06/22/panoramas-from-delhi/</link><pubDate>Fri, 22 Jun 2012 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2012/06/22/panoramas-from-delhi/</guid><description>&lt;p>I spent some time in India and at a few spots I took enough pictures to create panoramas. Make sure you click the links to the full version and zoom to the original size of the image. They&amp;rsquo;re huge and you can scroll around for a bit and discover nice details.&lt;/p>
&lt;p>&lt;img src="https://ilikeorangutans.github.io/assets/images/india-gate.jpg" alt="India Gate Panorama">
Full version: &lt;a href="https://ilikeorangutans.github.io/assets/images/india-gate.jpg">India Gate Panorama&lt;/a>!&lt;/p>
&lt;p>&lt;img src="https://ilikeorangutans.github.io/assets/images/delhi-panorama.jpg" alt="Delhi Rooftop Panorama">
Full version: &lt;a href="https://ilikeorangutans.github.io/assets/images/delhi-panorama.jpg">Delhi Rooftop Panorama&lt;/a>!&lt;/p></description></item><item><title>Software Developer</title><link>https://ilikeorangutans.github.io/cv/criticalmass/software_developer/</link><pubDate>Wed, 02 Feb 2011 00:00:00 +0000</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/cv/criticalmass/software_developer/</guid><description/></item><item><title>SSH (Remote) Tunnels</title><link>https://ilikeorangutans.github.io/2011/01/02/ssh-remote-tunnels/</link><pubDate>Sun, 02 Jan 2011 12:36:58 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2011/01/02/ssh-remote-tunnels/</guid><description>&lt;p>Just figured out how SSH remote tunnels work and wanted to write it down.&lt;/p>
&lt;p>Nomenclature:&lt;/p>
&lt;ul>
&lt;li>&lt;em>[Local] Client&lt;/em>: your local computer. In fact, if I say local, I mean the client.&lt;/li>
&lt;li>&lt;em>[Remote] Server&lt;/em>: the server you connect to. If I say remote, I mean server.&lt;/li>
&lt;/ul>
&lt;h3 id="forward-tunnels">Forward Tunnels&lt;/h3>
&lt;p>Your standard tunnel, allows you to take a local port and redirect it to a remote port on the server:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ssh -L REMOTEPORT:client:CLIENTPORT user@server
&lt;/code>&lt;/pre>&lt;p>Now, that by opening a tunnel in this way:&lt;/p></description></item><item><title>Antlr Grammars for Fun and Profit</title><link>https://ilikeorangutans.github.io/2010/11/24/antlr-grammars-for-fun-and-profit/</link><pubDate>Wed, 24 Nov 2010 23:10:35 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2010/11/24/antlr-grammars-for-fun-and-profit/</guid><description>&lt;p>Recently at work I had to work on files in our legacy system. Those files, being part of a proprietary product, are unknown to any editor or pretty printer that you can find. And most of them are not formatted nicely, if at all. Being a lazy developer I really love eclipse&amp;rsquo;s code formatting features, because, hey, it takes away a lot of tedious and annoying formatting. Also, I think properly formatted files are easier to understand, maintain and fix. In fact, as I recently tweeted, I go as far as saying that I&amp;rsquo;m not particularly good in spotting problems, I just format everything which helps me to understand better.&lt;/p></description></item><item><title>Building a CMS with XML, XSLT, Ant, and ImageMagik</title><link>https://ilikeorangutans.github.io/2010/01/03/building-a-cms-with-xml-xslt-ant-and-imagemagik/</link><pubDate>Sun, 03 Jan 2010 11:37:30 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2010/01/03/building-a-cms-with-xml-xslt-ant-and-imagemagik/</guid><description>&lt;p>Not so long ago a freelance client approached me with some updates for their website. The site has been growing organically since 2000 and therefore was a big mess. Several attempts to port the site to a CMS driven system failed largely because those CMS systems are usually to complex for our needs (Typo3) or not flexible enough (Joomla, WordPress). So as I was faced with updates to all the updates including image updates which in turn needed thumbnails to be generated. The same day I stumbled randomly over the &lt;a href="http://www.w3.org/TR/xslt20/">xsl:result-document&lt;/a> function in XSLT 2.0 which allows you to transform a single XML file into several output files. That sparked an idea with me: why not use that to build a CMS system using XML technologies? I&amp;rsquo;ve toyed around with &lt;a href="http://cocoon.apache.org/">Cocoon&lt;/a> a couple of years ago but that was not what I was looking for. So I looked for other technologies&amp;hellip;&lt;/p></description></item><item><title>Software Developer</title><link>https://ilikeorangutans.github.io/cv/mindblossom/developer/</link><pubDate>Sun, 01 Feb 2009 00:00:00 +0000</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/cv/mindblossom/developer/</guid><description/></item><item><title>Software Developer Intern</title><link>https://ilikeorangutans.github.io/cv/mindblossom/developer_intern/</link><pubDate>Fri, 01 Aug 2008 00:00:00 +0000</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/cv/mindblossom/developer_intern/</guid><description/></item></channel></rss>