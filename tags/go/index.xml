<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Jakob Külzer</title><link>https://ilikeorangutans.github.io/tags/go/</link><description>Recent content in Go on Jakob Külzer</description><generator>Hugo</generator><language>en-ca</language><managingEditor>jakob.kuelzer@gmail.com (Jakob Külzer)</managingEditor><webMaster>jakob.kuelzer@gmail.com (Jakob Külzer)</webMaster><copyright>Jakob Külzer</copyright><lastBuildDate>Fri, 23 Aug 2019 14:32:19 -0400</lastBuildDate><atom:link href="https://ilikeorangutans.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>zsh Autocompletion Caveat</title><link>https://ilikeorangutans.github.io/2019/08/23/zsh-autocompletion-caveat/</link><pubDate>Fri, 23 Aug 2019 14:21:43 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2019/08/23/zsh-autocompletion-caveat/</guid><description>&lt;p>I spent a good hour trying to get a custom completion script working while porting my app &lt;a href="https://github.com/ilikeorangutans/harbormaster">Harbormaster&lt;/a> to &lt;a href="https://github.com/spf13/cobra">Cobra&lt;/a>. It would and would not work. I retried writing the file, restarting the shell and it would just not offer any completions.
Eventually I stumbled upon a innocent looking &lt;a href="https://github.com/zsh-users/zsh-completions/issues/277#issuecomment-72867242">post&lt;/a> on Github that held the solution: remove the .zcompdump file which holds the cached completions. So I ran &lt;code>rm ~/.zcompdump &amp;amp;&amp;amp; compinit&lt;/code> and everything works as expected.&lt;/p></description></item><item><title>null, Software Design, and Scala's Option</title><link>https://ilikeorangutans.github.io/2018/05/26/null-software-design-and-scalas-option/</link><pubDate>Sat, 26 May 2018 12:13:10 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2018/05/26/null-software-design-and-scalas-option/</guid><description>&lt;p>For the past year or so I&amp;rsquo;ve been writing a lot of Scala and fallen in love with its &lt;code>Option&lt;/code> type and how it allows me to avoid &lt;code>null&lt;/code>s. I reflected on &lt;code>null&lt;/code>, why they are bad, and how optional types allow you to write more expressive code.&lt;/p>
&lt;h2 id="what-is-null">What is null?&lt;/h2>
&lt;p>Most programming languages have the concept of &lt;code>null&lt;/code> (or &lt;code>nil&lt;/code>) that represents the absence of a given value or object. At it&amp;rsquo;s surface the absence of a value probably just translates into a pointer of value &lt;code>0x0&lt;/code> or in languages that do not zero variables, a pointer anywhere into the memory. But aside from the implementation details the more interesting question is how &lt;code>null&lt;/code> fits into a language&amp;rsquo;s type system.&lt;/p></description></item><item><title>Google Appengine, Go, and Vendoring</title><link>https://ilikeorangutans.github.io/2016/05/22/google-appengine-go-and-vendoring/</link><pubDate>Sun, 22 May 2016 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2016/05/22/google-appengine-go-and-vendoring/</guid><description>&lt;p>I&amp;rsquo;m working on a small app running on Google App engine using Go and upgraded to the latest version of the GAE SDK. The latest version uses Go 1.6 instead of 1.4 like the older version I had. Upgrading was mostly straightforward, but once I started using vendoring I got strange build errors like this:&lt;/p>
&lt;pre>&lt;code>2016/05/22 13:26:47 go-app-builder: Failed parsing input: parser: bad import &amp;quot;syscall&amp;quot; in vendor/golang.org/x/net/ipv4/dgramopt_posix.go
&lt;/code>&lt;/pre>
&lt;p>I got different variations of this, but all came down to the same problem: some code was importing packages that GAE doesn&amp;rsquo;t want you tu use. Sadly these errors don&amp;rsquo;t show up during normal &lt;code>goapp build&lt;/code> or &lt;code>goapp test&lt;/code> cycles, but only when you want to deploy or start a local devserver.&lt;/p></description></item><item><title>gorename and invalid expression</title><link>https://ilikeorangutans.github.io/2015/10/23/gorename-and-invalid-expression/</link><pubDate>Fri, 23 Oct 2015 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2015/10/23/gorename-and-invalid-expression/</guid><description>&lt;p>This took me longer to figure out than I care to admit, so here&amp;rsquo;s the solution.&lt;/p>
&lt;p>The issue comes up when trying to use &lt;a href="https://godoc.org/golang.org/x/tools/cmd/gorename">gorename&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2c5dcd;font-weight:bold">$&lt;/span> gorename -from &lt;span style="color:#0c6">&amp;#34;github.com/ilikeorangutans/foo&amp;#34;&lt;/span>.MyType -to &lt;span style="color:#0c6">&amp;#39;MyBetterType&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa">gorename: -from &amp;#34;github.com/ilikeorangutans/foo.MyType&amp;#34;: invalid expression
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Even though the &lt;code>from&lt;/code> query looks normal, &lt;code>gorename&lt;/code> just refuses to work. However the issue is not so much with &lt;code>gorename&lt;/code> but rahter my shell, zsh. Turns out properly escaping your from query, fixes the issue:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#4d4d4d;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#2c5dcd;font-weight:bold">$&lt;/span> gorename -from &lt;span style="color:#0c6">&amp;#39;&amp;#34;github.com/ilikeorangutans/foo&amp;#34;.MyType&amp;#39;&lt;/span> -to &lt;span style="color:#0c6">&amp;#39;MyBetterType&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aaa">Renamed 15 occurrences in 5 files in 1 package.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice the single quotes around the entire &lt;code>from&lt;/code> parameter.&lt;/p></description></item><item><title>Using Golang and Graphviz to Visualize Complex Grails Applications</title><link>https://ilikeorangutans.github.io/2014/05/03/using-golang-and-graphviz-to-visualize-complex-grails-applications/</link><pubDate>Sat, 03 May 2014 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2014/05/03/using-golang-and-graphviz-to-visualize-complex-grails-applications/</guid><description>&lt;p>At work we are maintaining several large and complex grails applications. In order to improve stability and reliability, we&amp;rsquo;re trying to increase test coverage. But as with all projects, time and resources are limited. In order to get a better understanding of what parts of the application are more important than others, I decided to use &lt;a href="http://www.graphviz.org/">Graphviz&lt;/a> to help me get a better overview of our applications.&lt;/p>
&lt;h3 id="meet-graphviz">Meet Graphviz&lt;/h3>
&lt;p>I discovered my love for the &lt;a href="http://www.graphviz.org/content/dot-language">dot language&lt;/a> when I used it years ago to analyze template hierarchies in a proprietary CMS system I worked on. In a nutshell, it lets you specify a graph with nodes and edges plus some extra attributes for labels, shapes etc. It&amp;rsquo;s really a concise little language:&lt;/p></description></item><item><title>Golang Reading and Notes for April 2014</title><link>https://ilikeorangutans.github.io/2014/04/27/golang-reading-and-notes-for-april-2014/</link><pubDate>Sun, 27 Apr 2014 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2014/04/27/golang-reading-and-notes-for-april-2014/</guid><description>&lt;p>Last week I attended the &lt;a href="http://golang.meetup.com/cities/ca/on/toronto/">Toronto Golang Usergroup Meetup&lt;/a> and it was plenty of fun. If you&amp;rsquo;re in or near Toronto and like to dabble with Go, come out. Oh, and did I mention free pizza?&lt;/p>
&lt;h3 id="notes">Notes&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Casting in Go is slightly different than in C related languages. Instead of a cast, you perform &lt;a href="http://golang.org/doc/effective_go.html#interface_conversions">a type conversion&lt;/a>:&lt;/p>
&lt;pre>&lt;code> var myVariable SomeGenericType = ...

 casted, ok := myVariable.(MoreSpecificType)
 // ok is a bool
 if ok {
 	// Type conversion successful
 } else {
 	// myVariable does not implement MoreSpecificType
 }
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>range&lt;/code> keyword when used with two return values does not return references, but rather copies. This had me struggle for a while as my code was not behaving as I thought it would. I had a slice of structs and was happily iterating over it:&lt;/p></description></item><item><title>First impressions: Go</title><link>https://ilikeorangutans.github.io/2013/11/12/first-impressions-go/</link><pubDate>Tue, 12 Nov 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2013/11/12/first-impressions-go/</guid><description>&lt;p>Ever since Google release &lt;a href="http://www.golang.org/">Go&lt;/a> I&amp;rsquo;ve been curious. Many good things were said and I always read bits and pieces here and there. Last week I decided to dive deeper and write some small things and get to know the language.&lt;/p>
&lt;p>So far I&amp;rsquo;m really impressed. This is a quick list of things I&amp;rsquo;ve noticed:&lt;/p>
&lt;h3 id="language">Language&lt;/h3>
&lt;p>The go language is full of nice surprises. I haven&amp;rsquo;t seen everything, but just a few things that really impressed me:&lt;/p></description></item></channel></rss>