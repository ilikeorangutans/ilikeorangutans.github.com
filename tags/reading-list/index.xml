<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading List on Jakob Külzer</title>
    <link>https://ilikeorangutans.github.io/tags/reading-list/</link>
    <description>Recent content in Reading List on Jakob Külzer</description>
    <generator>Hugo</generator>
    <language>en-ca</language>
    <managingEditor>jakob.kuelzer@gmail.com (Jakob Külzer)</managingEditor>
    <webMaster>jakob.kuelzer@gmail.com (Jakob Külzer)</webMaster>
    <copyright>Jakob Külzer</copyright>
    <lastBuildDate>Wed, 28 Mar 2018 21:05:46 -0400</lastBuildDate>
    <atom:link href="https://ilikeorangutans.github.io/tags/reading-list/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang Reading and Notes for April 2014</title>
      <link>https://ilikeorangutans.github.io/2014/04/27/golang-reading-and-notes-for-april-2014/</link>
      <pubDate>Sun, 27 Apr 2014 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author>
      <guid>https://ilikeorangutans.github.io/2014/04/27/golang-reading-and-notes-for-april-2014/</guid>
      <description>Last week I attended the Toronto Golang Usergroup Meetup and it was plenty of fun. If you&amp;rsquo;re in or near Toronto and like to dabble with Go, come out. Oh, and did I mention free pizza?&#xA;Notes Casting in Go is slightly different than in C related languages. Instead of a cast, you perform a type conversion:&#xA;var myVariable SomeGenericType = ... casted, ok := myVariable.(MoreSpecificType) // ok is a bool if ok { // Type conversion successful } else { // myVariable does not implement MoreSpecificType } The range keyword when used with two return values does not return references, but rather copies.</description>
    </item>
    <item>
      <title>JSR-269 Annotation Processing</title>
      <link>https://ilikeorangutans.github.io/2013/08/13/jsr-269-annotation-processing/</link>
      <pubDate>Tue, 13 Aug 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author>
      <guid>https://ilikeorangutans.github.io/2013/08/13/jsr-269-annotation-processing/</guid>
      <description>I&amp;rsquo;ve been contemplating compile time bytecode manipulation for the Object Mapper Framework for a while now. Compile time instrumentation of classes seems to be a better approach and does away a whole lot of class loading issues, especially in OSGI environments. In any case, I remembered Project Lombok and reading about JSR-269, which was introduced with Java 1.6. It&amp;rsquo;s an API that allows you to plug custom annotation processors into javac.</description>
    </item>
    <item>
      <title>Reading List: JVM Internals, Rugged Software, and 12 Factor Apps</title>
      <link>https://ilikeorangutans.github.io/2012/12/04/reading-list-jvm-internals-rugged-software-and-12-factor-apps/</link>
      <pubDate>Tue, 04 Dec 2012 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author>
      <guid>https://ilikeorangutans.github.io/2012/12/04/reading-list-jvm-internals-rugged-software-and-12-factor-apps/</guid>
      <description>Recently I&amp;rsquo;ve been reading a lot about software development and philosophies on how to write better software. I really enjoyed the Rugged Manifesto as it emphasizes how software is crucial in our world and the responsibilities that come with it. Another great guide is Twelve-Factor App, a list of 12 principles on how to effectively implement and operate applications. And last but not least, Understanding JVM Internals, a really well written cross cut through the JVM, including class file format, JVM structure and stack memory layouts.</description>
    </item>
    <item>
      <title>OSGI Classloading Reading List</title>
      <link>https://ilikeorangutans.github.io/2012/10/12/osgi-classloading-reading-list/</link>
      <pubDate>Fri, 12 Oct 2012 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author>
      <guid>https://ilikeorangutans.github.io/2012/10/12/osgi-classloading-reading-list/</guid>
      <description>I&amp;rsquo;ve been doing a lot of reading on how OSGI handles class loading. I&amp;rsquo;m starting to fully understand and leverage OSGI and I&amp;rsquo;m trying to keep my framework Object Mapper as compatible with OSGI as I can.&#xA;In OSGI classloading is very restricted, similar to what happens in enterprisy Java application servers, and completely unlike traditional Java applications where everything shares a single classloader. In OSGI each bundle has its own classloader and what is visible accross the bundle boundaries is subject to strict export rules.</description>
    </item>
  </channel>
</rss>
