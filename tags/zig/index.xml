<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zig on Jakob Külzer</title>
    <link>https://ilikeorangutans.github.io/tags/zig/</link>
    <description>Recent content in Zig on Jakob Külzer</description>
    <generator>Hugo</generator>
    <language>en-ca</language>
    <managingEditor>jakob.kuelzer@gmail.com (Jakob Külzer)</managingEditor>
    <webMaster>jakob.kuelzer@gmail.com (Jakob Külzer)</webMaster>
    <copyright>Jakob Külzer</copyright>
    <lastBuildDate>Wed, 17 Jul 2024 12:45:27 -0400</lastBuildDate>
    <atom:link href="https://ilikeorangutans.github.io/tags/zig/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Zig Fetch</title>
      <link>https://ilikeorangutans.github.io/2024/07/17/zig-fetch/</link>
      <pubDate>Wed, 17 Jul 2024 12:18:03 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author>
      <guid>https://ilikeorangutans.github.io/2024/07/17/zig-fetch/</guid>
      <description>Zig&amp;rsquo;s package manager is still a bit rough. It only supports fetching tarballs, but many github projects don&amp;rsquo;t have them unless they have a release. There&amp;rsquo;s a trick to fetch any commit as a tarball though:&#xA;https://api.github.com/repos/&amp;lt;repo-owner&amp;gt;/&amp;lt;repo&amp;gt;/tarball/&amp;lt;ref&amp;gt; zig fetch can than download the code:&#xA;zig fetch --save https://api.github.com/repos/&amp;lt;repo-owner&amp;gt;/&amp;lt;repo&amp;gt;/tarball/&amp;lt;ref&amp;gt; Once the code is downloaded, it still has to be added to your exe or libray in build.zig:&#xA;const exe = b.addExecutable(.{ .</description>
    </item>
    <item>
      <title>One Billion Row Challenge in Zig</title>
      <link>https://ilikeorangutans.github.io/2024/05/05/one-billion-row-challenge-in-zig/</link>
      <pubDate>Sun, 05 May 2024 13:54:44 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author>
      <guid>https://ilikeorangutans.github.io/2024/05/05/one-billion-row-challenge-in-zig/</guid>
      <description>I finally got around to looking into The One Billion Row Challenge. If you&amp;rsquo;re unfamiliar, it&amp;rsquo;s a challenge to how fast a program can read and process one billion rows. It&amp;rsquo;s fascinating because it&amp;rsquo;s all about raw performance including algorithms, CPU instructions, and profiling and benchmarking. All things I enjoy dabbling with.&#xA;So one Saturday evening I started reading up on the challenge. The first thing that struck me was the top entries&amp;rsquo; time: 1.</description>
    </item>
    <item>
      <title>Zig - First Impressions</title>
      <link>https://ilikeorangutans.github.io/2023/10/23/zig-first-impressions/</link>
      <pubDate>Mon, 23 Oct 2023 19:50:27 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author>
      <guid>https://ilikeorangutans.github.io/2023/10/23/zig-first-impressions/</guid>
      <description>I&amp;rsquo;ve been following the zig language for a while ever since I saw Andrew Kelly&amp;rsquo;s talk on Corecursive. The way Andrew describes the design of zig was very engrossing and who doesn&amp;rsquo;t like a language build for speed. But I have struggled with picking it up; time is in short supply and so were docs for zig when I first looked at it.&#xA;But that has changed; I finally found some motivation and ziglearn.</description>
    </item>
  </channel>
</rss>
