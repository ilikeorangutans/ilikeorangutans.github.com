<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Jakob Külzer</title><link>https://ilikeorangutans.github.io/tags/java/</link><description>Recent content in Java on Jakob Külzer</description><generator>Hugo</generator><language>en-ca</language><managingEditor>jakob.kuelzer@gmail.com (Jakob Külzer)</managingEditor><webMaster>jakob.kuelzer@gmail.com (Jakob Külzer)</webMaster><copyright>Jakob Külzer</copyright><lastBuildDate>Wed, 28 Mar 2018 21:05:46 -0400</lastBuildDate><atom:link href="https://ilikeorangutans.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>JSR-269 Annotation Processing</title><link>https://ilikeorangutans.github.io/2013/08/13/jsr-269-annotation-processing/</link><pubDate>Tue, 13 Aug 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2013/08/13/jsr-269-annotation-processing/</guid><description>&lt;p>I&amp;rsquo;ve been contemplating compile time bytecode manipulation for the &lt;a href="http://www.objectmapper.org/">Object Mapper Framework&lt;/a> for a while now. Compile time instrumentation of classes seems to be a better approach and does away a whole lot of class loading issues, especially in OSGI environments. In any case, I remembered &lt;a href="http://projectlombok.org/">Project Lombok&lt;/a> and reading about &lt;a href="http://jcp.org/en/jsr/detail?id=269">JSR-269&lt;/a>, which was introduced with Java 1.6. It&amp;rsquo;s an API that allows you to plug custom annotation processors into javac.&lt;/p>
&lt;p>After experimenting and reading a bit, here is my reading list:&lt;/p></description></item><item><title>Making Eclipse's Method Stubs Better and other things</title><link>https://ilikeorangutans.github.io/2013/06/26/making-eclipses-method-stubs-better-and-other-things/</link><pubDate>Wed, 26 Jun 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2013/06/26/making-eclipses-method-stubs-better-and-other-things/</guid><description>&lt;p>Just downloaded &lt;a href="http://www.eclipse.org/kepler/">Eclipse Kepler&lt;/a> and I&amp;rsquo;m quite happy with it. It appears fast and stable so far, but that could be just that it&amp;rsquo;s a brand new install. Anyways, I re-added some of my usual code templates and while doing so, I discovered a few useful things. And because I keep doing this on every Eclipse installation, I decided to write this down here. On a related note, an Eclipse plugin to share your Eclipse templates would be pretty rad. But I digress.&lt;/p></description></item><item><title>OSGI, Guice, and Peaberry: first steps</title><link>https://ilikeorangutans.github.io/2013/02/27/osgi-guice-and-peaberry-first-steps/</link><pubDate>Wed, 27 Feb 2013 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2013/02/27/osgi-guice-and-peaberry-first-steps/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I&amp;rsquo;ve been trying to get &lt;a href="https://code.google.com/p/google-guice/">Google Guice&lt;/a> and &lt;a href="https://code.google.com/p/peaberry/">Peaberry&lt;/a> to work in my OSGI projects for a while. Google Guice is a great dependency injection framework, and Peaberry promises to bridge the gap between OSGI services and dependency injection.&lt;/p>
&lt;p>However, getting Peaberry to work was not trivial, mostly because there aren&amp;rsquo;t many docs and the quality of the docs is somewhat lacking. The best piece is still this pdf &lt;a href="https://code.google.com/p/peaberry/downloads/detail?name=peaberry%20-%20blending%20services%20and%20extensions.pdf">Peaberry - blending services and extensions&lt;/a>, but it&amp;rsquo;s a lot of information in very little space.&lt;/p></description></item><item><title>Google Guice and Scope Mixing</title><link>https://ilikeorangutans.github.io/2012/12/11/google-guice-and-scope-mixing/</link><pubDate>Tue, 11 Dec 2012 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2012/12/11/google-guice-and-scope-mixing/</guid><description>&lt;p>I&amp;rsquo;ve been working on a small Java application I wrote a few years ago for some bug fixes and in the process of making it better, I introduced &lt;a href="https://code.google.com/p/google-guice/">Google Guice&lt;/a>, my favourite dependency injection framework. On of the great features of Guice is that it supports different &lt;a href="https://code.google.com/p/google-guice/wiki/Scopes">scopes for injection&lt;/a>. Per default, Guice will return a new object for every request. But sometimes you want to objects to be created a bit less liberally, for example, you want a certain object to be created only once. Guice has a &lt;code>@Singleton&lt;/code> scope for that. Want an object to be created once for a request? Guice and &lt;a href="https://code.google.com/p/google-guice/wiki/Servlets">guice-servlet&lt;/a> offers &lt;code>@RequestScoped&lt;/code> and &lt;code>SessionScoped&lt;/code>. But there&amp;rsquo;s more, need JUnit per test scope? &lt;a href="https://code.google.com/p/guiceberry/">Guiceberry&lt;/a> has exactly that: &lt;code>@TestScoped&lt;/code> that will make sure every test gets exactly one object.&lt;/p></description></item><item><title>Reading List: JVM Internals, Rugged Software, and 12 Factor Apps</title><link>https://ilikeorangutans.github.io/2012/12/04/reading-list-jvm-internals-rugged-software-and-12-factor-apps/</link><pubDate>Tue, 04 Dec 2012 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2012/12/04/reading-list-jvm-internals-rugged-software-and-12-factor-apps/</guid><description>&lt;p>Recently I&amp;rsquo;ve been reading a lot about software development and philosophies on how to write better software. I really enjoyed the &lt;a href="https://www.ruggedsoftware.org/">Rugged Manifesto&lt;/a> as it emphasizes how software is crucial in our world and the responsibilities that come with it.
Another great guide is &lt;a href="http://www.12factor.net/">Twelve-Factor App&lt;/a>, a list of 12 principles on how to effectively implement and operate applications.
And last but not least, &lt;a href="http://www.cubrid.org/blog/dev-platform/understanding-jvm-internals">Understanding JVM Internals&lt;/a>, a really well written cross cut through the JVM, including class file format, JVM structure and stack memory layouts.&lt;/p></description></item><item><title>commons-logging in OSGI Environments</title><link>https://ilikeorangutans.github.io/2012/11/14/commons-logging-in-osgi-environments/</link><pubDate>Wed, 14 Nov 2012 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2012/11/14/commons-logging-in-osgi-environments/</guid><description>&lt;p>While working on a small toy project using Apache Felix and commons-httpclient, I kept running into the issue that there is no official OSGI bundle for Apache commons-logging out there. While most Apache commons projects either provide simple bundles or full blown OSGI implementations with Activators and Services, commons-logging is an interesting exception. If you scan the &lt;a href="http://wiki.apache.org/commons/CommonsOsgi">Commons OSGI status page&lt;/a>, you will notice that there is no OSGI version for commons-logging available, and a separate section to explain why. I haven&amp;rsquo;t dug into why and how it conflicts with the OSGI classloading scheme, but I can see that being a problem. Be it as it may, there is no official OSGI bundle for commons logging.&lt;/p></description></item><item><title>OSGI Bootstrapping</title><link>https://ilikeorangutans.github.io/2012/10/23/osgi-bootstrapping/</link><pubDate>Tue, 23 Oct 2012 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2012/10/23/osgi-bootstrapping/</guid><description>&lt;p>I&amp;rsquo;ve been working with OSGI based technology for a while now and it&amp;rsquo;s a great piece of technology. However, so far I&amp;rsquo;ve only worked with OSGI technology that runs in existing instances of the framework. A running framework is easy to deal with, but how do you get to this point? I spent some time today playing with that, and it took me a while to put it all together. So naturally, I&amp;rsquo;ll have to record my findings here.&lt;/p></description></item><item><title>OSGI Classloading Reading List</title><link>https://ilikeorangutans.github.io/2012/10/12/osgi-classloading-reading-list/</link><pubDate>Fri, 12 Oct 2012 13:59:40 -0400</pubDate><author>jakob.kuelzer@gmail.com (Jakob Külzer)</author><guid>https://ilikeorangutans.github.io/2012/10/12/osgi-classloading-reading-list/</guid><description>&lt;p>I&amp;rsquo;ve been doing a lot of reading on how OSGI handles class loading. I&amp;rsquo;m starting to fully understand and leverage OSGI and I&amp;rsquo;m trying to keep my framework &lt;a href="https://github.com/ilikeorangutans/omf">Object Mapper&lt;/a> as compatible with OSGI as I can.&lt;/p>
&lt;p>In OSGI classloading is very restricted, similar to what happens in enterprisy Java application servers, and completely unlike traditional Java applications where everything shares a single classloader. In OSGI each bundle has its own classloader and what is visible accross the bundle boundaries is subject to strict export rules. In order to use a class outside of a bundle you&amp;rsquo;ll have to explicitly declare its package as exported. There are many benefits to this strict architecture, clean architectures, reusable components and the ability to update bundles at runtime are probably the most important ones.&lt;/p></description></item></channel></rss>